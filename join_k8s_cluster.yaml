---        
- hosts: master
  gather_facts: no
  vars:
      ansible_python_interpreter: /usr/bin/python3
  tasks:         

    - name: join cmd
      shell: kubeadm token create --print-join-command
      register: k8_join_cmd  
      
    - name: Add join cmd to dummy host
      add_host:
        name:   "k8s_join_cmd_holder"
        cmd:  "{{ k8_join_cmd.stdout }}"
        
    - name: Fetch the conf from master
      fetch: 
        src: ${HOME}/.kube/config
        dest: /tmp/k8s_config
        flat: yes
                
- hosts: worker
  gather_facts: no
  tasks:
  
    - file:
        path: ~/.kube
        state: directory
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1
     
    - name: Copy conf to worker
      copy: 
        src: /tmp/k8s_config
        dest: ${HOME}/.kube/config
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1

  
    - name: check if in cluster
      uri:
        url: http://localhost:10248/healthz
      register: url_command_result
      ignore_errors: True    
      
    - name: disable swap
      become: yes
      shell: swapoff -a
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1
#       when: url_command_result.status != 200
      
      
    - name: Add the br_netfilter module
      become: yes    
      modprobe:
        name: br_netfilter
        state: present
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1
        
    - name: update sysctl param
      become: yes
      sysctl:
        name: "{{ item }}"
        value: 1
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1
        
    - name: kubeadm reset -f
      shell: kubeadm reset -f
      become: yes     
      ignore_errors: True
        
    - name: join
      shell: "{{ hostvars['k8s_join_cmd_holder']['cmd'] }}"
      become: yes
      register: task_result
      until: task_result.rc == 0
      retries: 10
      delay: 1
#       when: url_command_result.status != 200  
    
    - shell: kubectl get nodes -o json | jq '.items[].status.conditions[4].status'
      register: k8s_nodes_output
      retries: 70
      delay: 3
      until: groups['all'] | length | int - 1 == k8s_nodes_output.stdout_lines | length
      
#     - systemd:
#         state: restarted
#         daemon_reload: yes
#         name: "{{item}}"
#       with_items:
#         - "docker"
#         - "kubelet"
#       when: url_command_result.status != 200
#       become: yes
     
      
#     - reboot:
#       become: yes
#       when: url_command_result.status != 200

#     - name: Wait for the reboot to complete if there was a change.
#       wait_for_connection:
#         connect_timeout: 20
#         sleep: 5
#         delay: 5
#         timeout: 300
#       when: url_command_result.status != 200
      

#     - name: join
#       shell: "{{ hostvars['k8s_join_cmd_holder']['cmd'] }}"
#       become: yes
#       when: url_command_result.status != 200
      
#     - shell: kubectl get nodes -o json | jq -rc .
#       register: k8s_nodes_output
# #       until: k8s_nodes_output == "READY"
# #       retries: 10
# #       delay: 1
    
#     - debug: 
#         var: k8s_nodes_output
    
#     - fetch: 
#         src: /tmp/k8s_output_nodes
#         dest: /tmp/k8s_output_nodes
#         flat: yes
        

#     - shell: kubectl get nodes -o json | jq '.items[].status.conditions[4].status'
        
#     - debug: 
#         var: "{{ groups['all'] | length }}"
      
