---
- hosts: localhost
  gather_facts: no
  connection: local
  tasks:
                
    - file:
        path: node_ports
        state: directory


- hosts: master
  gather_facts: no
  tasks:
          
    - file:
        state: absent
        path: /tmp/node_ports/
        
    - file:
        path: /tmp/node_ports/
        state: directory
        
        
    - shell: kubectl get ns -o json | jq -r '.items[].metadata.name'
      register: namespaces
              
    - include:  get_node_ports2.yaml
      vars:
        k8s_namespace: "{{ item }}"
      with_items: "{{namespaces.stdout_lines}}"
        

    - name: Get the public IP address of the network.
      uri:
        url: https://api.ipify.org?format=json
        method: Get
      changed_when: false
      register: public_ip
      until: public_ip.status == 200
      retries: 10
      delay: 5

    - shell: "jq -s '{all_ports:[.[]]}' /tmp/node_ports/service_port_*.json > /tmp/node_ports/all_ports.json"

    - shell: jq '.all_ports[] |= .+{url:("https://{{public_ip['json']['ip']}}:"+(.ports.port|tostring))}' /tmp/node_ports/all_ports.json > /tmp/node_ports/all_ports_url.json

    - shell: jq '.all_ports|= unique_by(.ports.port)' /tmp/node_ports/all_ports_url.json > /tmp/node_ports/all_ports_url_unique_by.json

    - fetch:
        src: /tmp/node_ports/all_ports_url_unique_by.json
        dest: /tmp/node_ports/all_ports_url_unique_by.json


    - include_vars:
        file: /tmp/node_ports/all_ports_url.json/master/tmp/node_ports/all_ports_url_unique_by.json
        name: all_ports_url

    - wait_for:
        port: "{{item['ports']['port']|int}}"
        host: "{{public_ip['json']['ip']}}"
        delay: 6
        timeout: 600
      with_items: "{{ all_ports_url['all_ports'] }}"

    - uri:
        url: "{{item.url}}"
        method: Get
        validate_certs: no
      changed_when: false
      register: uri_out
      ignore_errors: yes
      with_items: "{{ all_ports_url['all_ports'] }}"

    - lineinfile:
        path: /tmp/node_ports/all_ports_url_unique_by.json
        regexp: '{{item.url}}'
        line: '"url":"http{{item.url}}"'
        state: present
      with_items: "{{ uri_out.results }}"
      when: item.failed

    - replace:
        path: /tmp/node_ports/all_ports_url_unique_by.json
        regexp: 'httphttps'
        replace: 'http'

    - fetch:
        src: /tmp/node_ports/all_ports_url_unique_by.json
        dest: /tmp/node_ports/all_ports_url_unique_by.json


    - include_vars:
        file: /tmp/node_ports/all_ports_url_unique_by.json/master/tmp/node_ports/all_ports_url_unique_by.json
        name: all_ports_url_unique_by

    - include: get_dashboard_token.yaml


    - set_fact:
        credential:
          token_type: k8s_dashboard_token
          token: "{{k8s_dashboard_token.stdout}}"

    - include: get_k8s_conf.yaml

    - set_stats:
        data:
          kubernetes:
            config: "{{kube_config}}"
            service_urls: "{{ all_ports_url_unique_by.all_ports }}"
            tokens:
              - "{{ credential }}"
#
##    - debug:
##        var: argo_token
##      when: argo_token is defined
#
#    - set_stats:
#        data:
#          kubernetes:
#            config: "{{kube_config}}"
#            service_urls: "{{ node_ports.stdout_lines }}"
#            tokens:
#              - "{{ credential }}"
#              - "{{ argo_token }}"
#      when: argo_token is defined
