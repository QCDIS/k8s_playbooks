---
- hosts: localhost
  gather_facts: no
  connection: local
  tasks:
                
    - file:
        path: node_ports
        state: directory


- hosts: master
  gather_facts: no
  tasks:

    - name: Get the public IP address of the network.
      uri:
        url: https://api.ipify.org?format=json
        method: Get
      changed_when: false
      register: public_ip
      until: public_ip.status == 200
      retries: 10
      delay: 5


    - include:  get_node_ports.yaml
      vars:
        ip: "{{public_ip['json']['ip']}}"

    - fetch:
        src:  /tmp/services.json
        dest:  /tmp/services.json
        flat: yes

    - include_vars:
        file: /tmp/services.json
        name: services

    - set_fact:
        ports: []


    - set_fact:
        ports: "{{ ports + item.info }}"
      with_items: "{{services['services']}}"


    - wait_for:
        port: "{{item['port']|int}}"
        host: "{{public_ip['json']['ip']}}"
        delay: 6
        timeout: 600
      with_items: "{{ports}}"

    - uri:
        url: "{{ item['url'] }}"
        method: Get
        validate_certs: no
      changed_when: false
      register: uri_out
      ignore_errors: yes
      with_items: "{{ ports }}"


    - shell: jq . /tmp/services.json > /tmp/services_prety.json

    - lineinfile:
        path: /tmp/services_prety.json
        regexp: '{{item.url}}'
        line: '          "url":"http{{item.url}}",'
        state: present
      with_items: "{{ uri_out.results }}"
      when: item.failed

    - replace:
        path: /tmp/services_prety.json
        regexp: 'httphttps'
        replace: 'http'

    - fetch:
        src:  /tmp/services_prety.json
        dest:  /tmp/services_prety.json
        flat: yes

    - include_vars:
        file: /tmp/services_prety.json
        name: services



    - include: get_dashboard_token.yaml
    
    - include: argo/get_argo_token.yaml

    - set_fact:
        credential:
          token_type: k8s_dashboard_token
          token: "{{k8s_dashboard_token.stdout}}"

    - include: get_k8s_conf.yaml

    - set_stats:
        data:
          kubernetes:
            config: "{{kube_config}}"
            services: "{{ services['services'] }}"
            tokens:
              - "{{ credential }}"


    - set_stats:
        data:
          kubernetes:
            config: "{{kube_config}}"
            services: "{{ services['services'] }}"
            tokens:
              - "{{ credential }}"
              - "{{ argo_token.stdout }}"
      when: argo_token is defined and argo_token.rc == 0
